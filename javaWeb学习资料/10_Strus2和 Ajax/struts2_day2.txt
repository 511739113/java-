1.跳转
  1.1 Action--->JSP
      *dispatcher  转发    为默认(缺省)跳转方式
		<result name="ok" type="dispatcher">/index.jsp</result>
	  *redirect  重定向
		<result name="ok" type="redirect">/index.jsp</result>
	  *完整格式：
		<result name="ok" type="dipatcher/redirect">
			<param name="location">/index.jsp</param>
		</result>
  1.2 Action--->Action
      *chain  转发
	    <result name="ok" type="chain">ActionName</result>
	  *redirectAction 重定向
		<result name="ok" type="redirectAction">ActionName</result>
		*注意ActionName指Action的配置名。
  1.3 Action--->Action  跨包
		<result name="ok5" type="redirectAction/chain">
    			<!-- 要跳转到namespace为【/res2】的包中，名为【result48】的action中 -->
    			<param name="namespace">/res2</param>
    			<param name="actionName">result48</param>
    	</result>
  *细节：
      response.sendRedirect("/appname/index.jsp?name=c46");  
	  <result name="ok" type="redirect">
			<param name="location">/index.jsp</param>
			<param name="name">c46</param>
	  </result>
  *补充：全局结果类型：将同一个package中的多个Action的重复的result，抽取出来，统一管理 
		<global-results>
    		<!-- 跳转错误页面 -->
    		<result name="error">/error.jsp</result>
    	</global-results>
		注意：全局结果类型，只限当前包中的Action使用。
		      即包之间的配置信息是不共享的。
			  如果，确实需要在包之间共享配置信息：
				 <package name="result47" extends="result46" namespace="/res2">
				 如上：则【包：result47】继承了【包：result46】则共享了【包：result46】中的所有信息。
============================================================================================================
2.跳转方式的选取：
  1.在增删改请求之后，为了防止请求重复提交，选用重定向。
  2.在查询之后，建议用转发。
  3.关于Chain和RedirectAction的选取：
	 *作为一个请求而言，是一个独立的功能，所以对于接收请求的任何一个Action
	  而言，理应完整的独立的实现改功能。
	  所以，一个请求，理应由一个Action独立完整的实现。
	 *当Action之间协作时，是功能之间的衔接，建议使用redirectAction。
	 *如果一个请求(功能)确实需要多个Action共同实现，则使用chain
============================================================================================================
3.多方法的控制器：
  3.1 方法定制：
	public String login(){
		System.out.println("login");
		return "loginok46";
	}
	public String xx(){
		xxx
	}
  3.2 静态的方法调用：
		<action name="mm" method="login" class="com.c46.many_methods.action.ManyMethodsAction">
    		<result name="loingok46">/index.jsp</result>
    	</action>
    	<action name="query46" method="queryOne" class="com.c46.many_methods.action.ManyMethodsAction">
    		<result name="loingok46">/index.jsp</result>
    	</action>
    	<action name="queryAll46" method="queryAll" class="com.c46.many_methods.action.ManyMethodsAction">
    		<result name="loingok46">/index.jsp</result>
    	</action>
    	<action name="upUser" method="updateUser" class="com.c46.many_methods.action.ManyMethodsAction">
    		<result name="loingok46">/index.jsp</result>
    	</action>
  3.3 动态的方法调用：DMI
	   动态的方法调用:Dynamic method invoke: DMI
    	 *易配置
    	 *可读性差
    	 由于name="user46_*"则【*】可匹配到任意多个任意字符，
    	 则：	 http://localhost:8989/struts2_day2/methods2/user46_a
	    	 http://localhost:8989/struts2_day2/methods2/user46_b
	    	 http://localhost:8989/struts2_day2/methods2/user46_c
	    	 http://localhost:8989/struts2_day2/methods2/user46_d
	    	 http://localhost:8989/struts2_day2/methods2/user46_login
	    	 http://localhost:8989/struts2_day2/methods2/user46_queryOne
	    	 http://localhost:8989/struts2_day2/methods2/user46_updateUser
	   	 则不同的url，【*】匹配到动态的结果，切【*】匹配到的内容，会填充到{1}位置上。
	   	{1}：占位符
        <action name="user46_*" method="{1}" class="com.c46.many_methods.action.ManyMethodsAction">
			<result name="loginok46">/index.jsp</result>
			<result name="queryok46">/index.jsp</result>
			<result name="queryallok46">/index.jsp</result>
			<result name="updateok46">/index.jsp</result>
		</action>  
  *细节：动态方法调用的使用：
	<form method="post" action="/struts2_day2/methods2/user46_login">
    	<input type="submit" value="submit"/>
    </form>
	
	
	<action name="xx" class="xxxx">
		<result name="xxx" type="redirectAction">user46_updateUser</result>
	</action>
  *技巧：将同一个逻辑单元的功定制在一个Action类中
         则同一个逻辑单元的功能实现，可以集中管理，且
		 功能之间可以复用相关属性。
============================================================================================================
4.struts2的数据传递机制：
  *存值：值栈
  *取值：OGNL
  *展示数据：struts2标签
===========================================================================================================
5.OGNL:对象图导航语言。
      :独立的，第三方的组件。
	  ：取值来源：*上下文(context)  *根对象(root)
	  :把任意一个Map指定为OGNL的上下文。
	  :把任意一个java对象指定为OGNL的根对象
   5.1 从根对象中取值语法：
      1>直接通过【属性名】取值
	  2>如果取出的是一个对象，则通过【.属性名】获取属性值
	  3>如果取出的是一个集合或数组，则通过【[index]】获取对应下标位置的元素
	  4>如果取出的是一个Map，则通过【.key】获取对应value
   5.2 从上下文取值语法：
      *从上下文取值，OGNL表达式要以【#】开始
	  
	  5>直接通过【key】取值
	  6>如果取出的是一个对象，则通过【.属性名】获取属性值
	  7>如果取出的是一个集合或数组，则通过【[index]】获取对应下标位置的元素
	  8>如果取出的是一个Map，则通过【.key】获取对应value
	
	   
   5.3 细节：
      *用于赋值方法：
		User user=new User(1,"c46",true,new Address(1,"beijing"));
		Ognl.setValue("id", new HashMap(), user,46);
		System.out.println(user.getId());
	  *运算：
	    1>算术运算：+ - * / %
		2>比较运算：> < == != >=  <=
		3>逻辑运算：&&  ||  !
		User user=new User(1,"c46",true,new Address(1,"beijing"));
		//以user为root，通过ognl从中取值
		System.out.println(Ognl.getValue("!((id+1)*2>3 && (1<0) || (1>0)) && (id>2)", new HashMap(), user));
	  *可以调用取出的值的对应类型中所有公开方法。
		User user=new User(1,"c46",true,new Address(1,"beijing"));
		//以user为root，通过ognl从中取值
		System.out.println(Ognl.getValue("name.charAt(1)", new HashMap(), user));
		System.out.println(Ognl.getValue("name.equals(\"c47\")", new HashMap(), user));
		System.out.println(Ognl.getValue("addrs.size()", new HashMap(), user));

作业：
   ems queryALL
   *t_admin  login 
   *employee queryAll
   *配置分包
   *定制Action要分逻辑
   *熟悉OGNL语法格式。











