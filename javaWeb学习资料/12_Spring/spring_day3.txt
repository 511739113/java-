0.在业务层中，有两个逻辑：额外功能 和 核心业务
  问题：稳定的核心业务 和 不稳定的 额外功能 耦合在一起。
        在多个业务功能，额外功能出现大量的冗余。
  class UserServiceImpl implements UserService{
	
	public void update(){
	    
		dao.update();//核心业务
		
	}
	public void delete(){
		
		dao.delete();//核心业务
		
	}
  
  }
  
  静态代理类：原始业务类+额外功能
        ：代理类中 要有和 原始业务类 中同样的功能实现
  class UserServiceProxy implements UserService{
	 private UserService us=new UserServiceImpl();
	 public void update(){
		//记录毫秒数
		tx.
		us.update();//核心业务
		tx.commit();
		//记录毫秒数
		//日记记录性能指标。
	 }
	 public void delete(){
		//记录毫秒数
		tx.
		us.delete();//核心业务
		tx.commit();
		//记录毫秒数
		//日记记录性能指标。
	 }
  }
  new UserServiceProxy().update();
  new UserServiceProxy().delete();
==========================================================================================
1.AOP：面向切面编程  代理模式  代理类
     : 代理=目标(target)+额外功能(advice)+切入点(pointCut)
	   切面=额外功能+切入点
	 : 通过advice的介入，将业务层中的额外功能 抽取出来，定制为了独立的组件
	   使得业务层中 【核心业务】和【额外功能】的耦合被打散，且
	   【额外功能】的冗余消除。
  OOP: 面向对象编程  类 接口 对象 继承  封装 多态 
  代理类：解决业务层中【核心业务】和【额外功能】冗余 耦合 的问题
==========================================================================================
2.动态代理搭建：
  2.1 准备原材料：目标  额外功能
       MethodBeforeAdvice  前置额外功能  
	   AfterReturingAdvice 后置额外功能
	   MethodInterceptor   环绕额外功能
	   [Advice=通知=额外功能]
        implements MethodBeforeAdvice{
			/**
			 * 主体逻辑：用于定制在核心业务之前执行的额外功能的逻辑。
			 * param:
			 *   m:目标中的方法对象
			 *   params:方法的参数表  如果为空参方法，则params的长度为0.
			 *   target:目标对象
			 */
			@Override
			public void before(Method m, Object[] params, Object target)
					throws Throwable {
				System.out.println("my before method:"+m.getName()+" params'length:"+params.length+" target:"+target);
			}
		}
  2.2 编织 ：weave 将目标对象和额外功能组件 组织在一起，最终形成代理对象。
		<!-- 目标 -->
		<bean id="userService" class="com.c46.service.UserServiceImpl"></bean>
		<!-- 额外功能：advice -->
		<bean id="before" class="com.c46.advice.MyBefore"></bean>
		<!-- 编织：将目标对象和额外功能组件 组织在一起，最终形成代理对象。
	            基于aop schema 完成编织
		 -->
		 <aop:config>
			<!-- 切入点：附加额外功能的 目标中的方法。
				 execution表达式：描述切入点位置
				 返回值   包   类  方法名  参数表
			  * com.c46.service.UserServiceImpl.*(..)
			  返回值任意   包                             类                            方法名任意   参数表任意
			 -->
			<aop:pointcut id="pc46" expression="execution(* com.c46.service.UserServiceImpl.*(..))"/>
			<!-- 将advice：before 切入到 pc46所示的位置上。 -->
			<aop:advisor advice-ref="before" pointcut-ref="pc46"/>
		 </aop:config>
  2.3 从工厂中获取动态生成的代理类：
        *通过目标类的beanID获取代理类对象。
		//通过目标类的beanID获取代理对象
		UserService us=(UserService)context.getBean("userService");
==========================================================================================
3.Advice：
  *前置：MethodBeforAdvice
  *后置：AfterReturningAdvice
		implements AfterReturningAdvice{
			/**
			 * 定制在核心业务之后执行的额外功能。
			 * param:
			 *    ret：目标方法的返回值，核心业务的业务结果,如果返回值是void ，则ret为null
			 *    m:目标方法对象
			 *    param:方法的参数表
			 *    target:目标对象
			 */
			@Override
			public void afterReturning(Object ret, Method m, Object[] param,
					Object target) throws Throwable {
				System.out.println("my after: ret:"+ret+" m:"+m.getName()+" param'length:"+param.length+" target:"+target);
			}
		}
  *环绕：MethodInterceptor
		implements MethodInterceptor{
			/**
			 * param:
			 *    mi:
			 *       mi.proceed();调用目标的方法。
			 * 注意：务必将目标方法的返回值向上返回。
			 */
			@Override
			public Object invoke(MethodInvocation mi) throws Throwable {
				System.out.println("tx begin");
				Object ret=mi.proceed();//调用目标的方法
				System.out.println("in inter ret is:"+ret);
				System.out.println("tx commit");
				return ret;//将目标的业务结果，向上返回给用户
			}
		}
  *异常时执行的额外功能：ThrowsAdvice(了解)
		implements ThrowsAdvice{
			/**
			 * 
			 * @param ex  目标中抛出的异常
			 * 
			 */
			public void afterThrowing(Exception ex){
				System.out.println("myThrows ：ex:"+ex.getMessage());
			}
		}
==========================================================================================
4. execution表达式：描述切入点的位置
   组成：返回值   包  类  方法名  参数表
   1>* com.c46.service.UserServiceImpl.updateUser(..)
     返回值：任意
	 包：com.c46.service
	 类：UserServiceImpl
	 方法名：updateUser
	 参数表：任意
   2>* com.c46.service.UserServiceImpl.*(..)
     返回值：任意
	 包：com.c46.service
	 类：UserServiceImpl
	 方法名：任意
	 参数表：任意
   3>* com.c46.service.*.*(..)
     返回值：任意
	 包：com.c46.service
	 类：任意
	 方法名：任意
	 参数表：任意
   4>* *(..)
     返回值：任意
	 包：任意
	 类：任意
	 方法名：任意
	 参数表：任意
   5>* login(..)
     返回值：任意
	 包：任意
	 类：任意
	 方法名：login
	 参数表：任意
   6>* com.c46.service.UserServiceImpl.*c46(..)
	 返回值：任意
	 包：com.c46.service
	 类：UserServiceImpl
	 方法名：以c46结尾的方法
	 参数表：任意
   *在定制execution表达式时，尽量精确，避免不必要的切入。
==========================================================================================
