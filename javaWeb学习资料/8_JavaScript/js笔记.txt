JavaScript: 网景公司，基于浏览器、解释型、脚本语言。
<head>
	<script type="text/javascript">
		//JS语句
	</script>
</head>
作用：1) 表单验证 2) 操作页面元素 3) 页面特效
注意：1) JS弱类型编程语言 2) 严格区分大小写

一、数据类型(数据的类型)
	声明变量： var 变量名; var 变量名=初值;
	1、基本类型
		1) 数字类型
			包含整数、小数、2/8/10/16进制
			5 1.2 080  
			
			// 在当前网页中输出
			document.write("<font color=red>"+m+"</font><br/>");
			// 弹出警告框
			alert(m);
			// 在调试控制台输出
			console.log("m = "+m);
			
			// 获取当前数据的数据类型
			typeof(m)
		2) 字符串
			使用''或""引起来的 1个或N个字符。
		3) 布尔类型
			true、false
	2、特殊类型
		null: 空对象，没有引用
		undefined: 未定义，声明了变量未赋值。

二、运算符
	+ - * / %
	> >= < <= == !=
	&& || !
	
	==：内容相同，即为true
	===：内容和类型都相同，才为true（全等）
	
三、逻辑语句
	if (){}
	if(){}else{}
	
	switch(){
		case 1: xxx; break;
		case 2: xxx; break;
		.....
		default:xxx
	}
	
	while(){}
	do{}while()
	for(var i=0; i<10; i++){
	}
	for(var i in arr){
	}

四、函数
	1、内置函数
		parseInt(str)  //字符串 转成 整数
			document.write(parseInt("123") + "<br/>"); //123
			document.write(parseInt("12.9") + "<br/>");//12
			document.write(parseInt("12a3") + "<br/>");//12
			document.write(parseInt("a123") + "<br/>");//NaN(Not a Number) 非数字
		
		parseFloat(str)  //字符串 转成 小数
			document.write(parseFloat("123") + "<br/>"); //123
			document.write(parseFloat("12.3") + "<br/>");//12.3
			document.write(parseFloat("12.3.4") + "<br/>");//12.3
			document.write(parseFloat("1.2a3") + "<br/>");//1.2
			document.write(parseFloat("a12.3") + "<br/>");//NaN(Not a Number) 非数字
		
		isNaN(m)    //判断m是否是 非数字
			document.write(isNaN("123") + "<br/>"); //false  是数字 不是非数字
			document.write(isNaN(123) + "<br/>");//false
			document.write(isNaN("12.3") + "<br/>");//false
			document.write(isNaN("12a3") + "<br/>");//true
		
	2、自定义函数
		定义： function 函数名(形参变量名, 变量名2){
					//功能语句
					...
					return xxx; // 函数的返回值
				}
		调用： 函数名(实参1,实参2);
		注意： 函数在调用时，实参和形参个数可以不一致，JS中提供 arguments数组 代表实参。
	
	3、匿名函数
		语法： var 变量名 = function (形参变量名, 变量名2){
					//功能语句
					...
					return xxx; // 函数的返回值
				};
		调用： 变量名(实参1,实参2)
	
五、对象
	1、html对象： html页面中的第个标签，在JS中，都对应一个html对象。
	2、自定义对象
		1) 使用new
			var obj = new Object();
			obj.name = "张三";
			obj.age = 18;
			obj.getName = function(){
				return this.name;
			};
			obj.setName = function(str){
				this.name = str;
			};
			obj.sleep = function(){
				document.write("HUHU~~~");
			}
			
		2) 使用JSON (JavaScript Object Notation) JS对象的表示形式
			a) 单个对象
				var obj = {
					name:"张三",
					age:18,
					getName:function(){
						return this.name;
					},
					setName:function(str){
						this.name = str;
					},
					sleep:function(){
						document.write("HUHU~~~");
					}
				}
			b) 数组
				var arr = [5,false,"hello"];
		
	3、内置对象
		1) String 字符串
			var str = "hello";
			var str = new String("hello");
			
			属性：length 属性 -- 获取长度
			方法：charAt 方法 -- 
					indexOf --
					substr --
					substring --
					charAt -- 
		2) Array 数组
			var arr = new Array();
			var arr = new Array(4);
			
			属性：length 属性 -- 获取长度
			方法： pop 方法 -- 
					push -- 
					reverse -- 
					sort -- 
		3) Date 日期
			var now = new Date(); //获取系统当前日期时间
			var myDate = new Date("2000-8-8"); //获取指定日期
		
			方法： getFullYear -- 获取4位年
				   getMonth -- 月份，0-11 
				   getDate -- 获取月份中的日期
				   getDay -- 星期，0-6  0-星期天
	课堂练习：按指定格式，显示当前日期时间。2015年10月21日 15：46：30 星期三
		4) Math 数学
			方法：  Math.random( )   //返回介于 0 和 1 之间的伪随机数。
					Math.round(number)    // 4舍5入

六、事件
	1、事件模型3要素
		事件源：发生动作的事物，通常是页面元素，如按钮
		事件：发生的动作，如单击
		监听器/事件处理程序：动作在事件源上发生后的功能，通常由函数定义。
	2、JS的程序是基于事件进行
		<html标签 属性="值" ... 事件名="函数调用" />【重点】
		<input type="button" value="问好" onclick="test()"/>
		<input type="button" value="问好" onclick="alert('hehe...');"/>
		
		常见的事件：
		鼠标相关
			onclick		单击
			ondblclick	双击
			onmouseover	移入
			onmouseout	移出
		
		键盘相关
			onkeydown	按下
			onkeyup		释放
		
		body相关
			onload		页面加载
			onscroll	滚动
			onresize	改变大小
		
		form相关
			onfocus		获得焦点
			onblur		失去焦点
			onchange	下拉列表的选项发生改变
			onsubmit     表单提交【重点】
					<form action="" ... onsubmit="return 函数名(实参)"
					
					函数中，错误分支 最后添加 return false; 
					        正确分支 最后添加 return true;
		
		【重点】
		// 获取html对象
		var obj = document.getElementById("id属性的值");
	
============  Day2 ================

	3、阻止事件的默认行为
		return false;
	
	4、事件冒泡
			当父标签和子标签中定义了同名事件时，如果在子标签上发生该动作时，子标签的事件处理程序会被自动
		执行，执行完后，该动作会被传递给父标签，导致父标签的事件处理程序也会被执行，该行为 称事件冒泡。
		阻止事件冒泡：子标签的事件处理程序后添加 event.stopPropagation();

一、DOM (Document Object Model 文档对象模型)
	提供一组 用于操作页面元素的 方法。
	1、获取页面元素
		// 根据id值，获取1个对象
		document.getElementById("id的值");   【重点】
		// 根据name值，获取同名的1组对象/数组
		document.getElementsByName("name的值");  【重点】
		// 根据 标签名 ，获取同标签的1组对象/数组
		document.getElementsByTagName("标签名称 如input");
		// 获取表单元素
		document.表单名.表单元素名 
	
	2、操作 对象属性
		dom对象.属性名
		
		注意：html标签的标签属性 就是 dom对象的对象属性。
	
	3、操作 对象的标签体内容
		dom对象.innerText = "新内容";  //只支持文字内容
		dom对象.innerHTML = "新内容";  //支持HTML标签
	
	4、操作 对象的样式
		dom对象.style.样式属性名 = "新值";
		dom对象.className = "新选择器名称";
		
		注意：JS中的样式属性名 是在 CSS属性名的基础上，去掉中间的-，其后首字母改大小。
		
		// 常见的应用
		dom对象.style.display = "none";//隐藏
		dom对象.style.display = "block";//显示（块状）   inline //显示（行级）
		
	5、修改 页面内容（动态表格）  <div id="" style="" > xxxx </div>
		1) 创建文本节点对象
			var txtObj = document.createTextNode("文本内容");
		2) 创建标签对象
			var tagObj = document.createElement("标签名称");
		3) 为父对象添加子对象（末尾）
			父对象.appendChild(子对象);
		4) 删除对象
			父对象.removeChild(子对象);
		5) 替换对象
			父对象.replaceChild(新对象, 旧对象);
		6) 在指定元素前插入
			父对象.insertBefore(新对象, 旧对象);
		7) 一组属性
			dom对象.parentNode       // 父对象
			
			dom对象.childNodes       // 所有子对象
			dom对象.firstChild       // 第1个子对象
			       .lastChild        // 最后1个子对象
				   
			dom对象.nextSibling      // 下1个兄弟节点对象
			       .previousSibling  // 前1个兄弟节点对象

============  Day3 ================

一、引入外部的JS文件
	1、创建外部JS文件
		后缀 .js
		内容 只能包含JS，不能包含HTML标签
	2、引入外部JS文件
		<script type="text/javascript" src="JS路径及文件名" ></script>
		
二、BOM（Browser Object Medel 浏览器对象模型）
	提供一组 用于操作 浏览器的属性和方法。
	1、window   代表当前打开的窗口
		window是所有对象的最顶层对象，在使用时 window. 可以省略。
		
		alert("msg");    // 弹出警告框，显示msg消息
		open("url");    // 打开新窗口，加载url指定的资源页面
		close();    //关闭当前窗口
		
		//输入框，显示msg消息，同时输入框的默认值是defaultValue
		// 点“确认”，返回输入框中输入的字符串内容
		// 点“取消”，返回null
		prompt("msg","defaultValue");
		
		// 确认对话框，显示msg消息
		// 点“确认”，返回 true
		// 点“取消”，返回 false
		var bn = confirm("msg");
		
		// 设置定时器
		window.setInterval(getNow, 1000); // 每隔1000ms调用getNow函数
		window.setTimeout(getNow, 1000);  // 经过1000ms调用getNow函数1次
   
	2、document  当前html文档
		document.forms      当前网页中所有<form>构成的数组
	
	3、location   地址栏
		location.href      地址栏中的字符串
	4、history    前进/后退按钮
		history.back(); // 后退
		history.forward(); //前进
	
三、JS在开发中的应用【重点】
	1、表单验证
		<form ...  onsubmit="return 函数名(实参)" >
		function checkUsername(){
			...
			if (错误分支){
				return false;
			}
			正确分支： return true;
		}
	2、修改dom对象的样式
		dom对象.style.样式属性名 = "新值";
		dom对象.className = "选择器名称";
		
		dom对象.style.display = "none|block";   
	3、全选/全不选
		
	4、手动提交表单
		form对象.submit(); //手动提交表单
		
四、下拉列表
	select对象.value     // 获取下拉列表选中的值
	
	select对象.options    // 当前select中所有option标签构成的数组
	select对象.options.length    // 获取选项的个数
	
	select对象.selectedIndex     // 当前选中项 在options 数组中的下标
	select对象.options[select对象.selectedIndex].value    //获取选中项的value（同select对象的value属性）
	select对象.options[select对象.selectedIndex].text      //获取选中项的文本
	
五、确认删除【重点】
	1、取消超链接自身的链接功能
		<a href="javascript:void(0)"
	2、给超链接添加onclick事件
		<a href="javascript:void(0)" onclick="confirmDel('1')"
		
		var bn = window.confirm("确认删除吗？");
		if (bn){
			location.href = "?id=" + id;
		}
	
	3、在JS中可以使用EL
		<a href="javascript:void(0)" onclick="confirmDel('${user.id}')"
		
		location.href = "/js_day3/delAction.jsp?id=" + id;
	

	
