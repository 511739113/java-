1.双向【1：*】关联关系映射
  1>搭建关联关系：
     *在实体中
	 *在表中
  2>映射关联关系  O  R    M
	 主表方：
		//关系属性:接口类型  ，明确定义泛型
		@OneToMany(mappedBy="user46")//mappedBy 由对方维护外键
		@Cascade(value=CascadeType.SAVE_UPDATE)
		private Set<Order> orders;
	
	 从表方：
		//关系属性
		@ManyToOne
		@JoinColumn(name="user_id")//当前方维护外键
		@Cascade(value=CascadeType.SAVE_UPDATE)
		private User user46;
	 
  3>使用关联关系：传递性持久化 
    *查询
	*增加
	*更新
	*删除
	*在操作时，可以类比1:1.
	
============================================================================================
2.单向 【1：*】关联关系映射
    *在关系的一方中，去除关系属性，只在一方，保留。
	*将关系保留在主表方：
		//关系属性:接口类型  ，明确定义泛型
		@OneToMany
		@JoinColumn(name="user_id")//去掉了mappedBy ,添加了JoinColumn，有主表方持有外键。
		@Cascade(value=CascadeType.SAVE_UPDATE)
		private Set<Order> orders=new HashSet<Order>();//防止在维护关系时，报空指针异常。
	*单向关系的使用：
	【在1：*该为单向后，区别：在插入时，如果需要维护关系，则将关系交给持有关系的一方即可】
==========================================================================================
3. 【*:*】 关联关系映射
    student     course
	  *           *
  1>搭建
     *在表中
	 
	 *在实体中
  2>映射
		*双方的映射是一致的。
        //name=中间表      
		//joinColumns=指向自己的外键    inverseJoinColumns=指向对方的外键
		@ManyToMany
		@JoinTable(name="t_s_c"
				   ,joinColumns={@JoinColumn(name="cid")}
				   ,inverseJoinColumns={@JoinColumn(name="sid")}
		)
  3>使用：
==========================================================================================
1:*
 user  group
 使用之前的表单验证，测试通过。
 
2.*:*
 
 学生和课程
 
===========================================================================================
查询 略
删除 
    1.单独删除从表
	   *查询出要删除的数据
	   *session.delete(xxx);
	   *特例：在1:1中需要在删除之前，在主表方解除关系
	2.级联删除
	   *给足权限
	   *查询出要删除的数据
	   *session.delete(xx);
更新 略
插入 
    1.单独插入主表 略
	2.为主表附加从表数据
	  *查询出主表数据
	  *创建出从表数据
	  *维护关系：
	     -->将关系交给持有外键的一方。
	  *session.save(xx);
	3.级联插入：
	  *创建双方数据
	  *维护关系：
	    -->如果双方都持有关系，将每一方交给对方
		-->如果只有一方有关系，将没有关系的一方，交给持有关系的一方。
		特例：在*：*中，关系只能交给其中一方。否则会由于重复维护关系，导致违反唯一约束
	4.在已存在的双方数据之间建立关系。
	   *查询出双方数据
	   *维护关系
	      在*：*中，关系只能交给其中一方。否则会由于重复维护关系，导致违反唯一约束
	   *session.update(任何一方);
===========================================================================================

 
3.  A   B   C   D
    1   *
	1       1
	*            *
	    1   *
		    1    1
	class A{
	    @OnetoMany
		Set<B> bs;
		@OnetoOne
		C c;
		@ManytoMany
		Set<D> ds;
	}
  
  
  
  
  
  
  